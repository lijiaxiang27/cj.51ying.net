(function(g) {
    if (g.danmu) {
        return
    }
    var _strMap = "秋天，绝对是个适合扮靓的季节。没有夏季的毒辣太阳，可以避免一出门就汗流浃背的窘相；没有冬季肆虐的冷风，不必缩在屋里躲避寒流。秋天可以尽情张扬，随心所欲。当秋姑娘迈着轻盈的脚步款款而来的时候，爱美的美眉们突然惊觉：该上街逛逛了，淘淘今秋的时尚物品，好搭配那些靓靓的秋衣，把自己打造成一个靓丽的秋季美人。 　　秋季有那些精美的饰品和扮靓招数，需要购买哪些东西来装扮自己？  　　街头淘首饰  　　秋季不冷不热，秋衣多半是低领的，或者敞开衣领。光溜溜的雪白脖子没有一条项链装饰，岂不是美中不足？笔者在闲逛中发现了几款比较有特色的西藏项链，可以买来配上秋装。  　　珊瑚藏银链藏银是西藏民族之银，对人体有强烈吸收能力。红色的珊瑚和银色的藏银珠相配，不失为一条活泼又富有时尚味道的项链。  　　天珠项链天珠是吉祥物，最早起源于西藏，因其不同的图案具有不同的象征意义，成了人们护身的时尚饰品。物理学家还研究发现天珠可以增强人体磁场，活化细胞组织，促进血液循环，调理人体机能。  　　牛骨项链牛的骨头设计创作了多款首饰，它能辟邪开运，代表了西藏永久的民族风情。";
    var danmu = g.danmu = {
        _msgList: [],
        _prePlayList: [],
        _prePlayMsgs: [],
        _msgPlayedList: [],
        _msgPlayed: [],
        _getNewMsg: false,
        _colorList: ["white", "orange2", "orange", "green", "blue", "yellow"],
        _colorHashList: {
            "white": "#ffffff",
            "orange2": "ff4000",
            "orange": "#ff7800",
            "green": "#189c51",
            "blue": "#1E0EF5",
            "yellow": "#E6F708"
        },
        _Vmax: 500,
        _Vmin: 70,
        _Tvisible: null,
        _Dmargin: 50,
        _playCheckTime: 500,
        _totalMsg: 0,
        _pullCheckTime: 5000,
        _pullTimer: null,
        _pullAjaxObj: null,
        _conf: null
    };
    danmu.pullStop = function() {
        clearTimeout(this._pullTimer);
        this._pullTimer = null;
        if (this._pullAjaxObj) {
            this._pullAjaxObj.abort()
        }
        this._pullAjaxObj = null;
        return this
    };
    danmu.pull = function() {
        var me = this;
        this.pullStop();
        this.sync(function(err, isOk) {
            me._pullTimer = setTimeout(function() {
                me.pull()
            },
            me._pullCheckTime)
        });
        return this
    };
    danmu.sync = function(cb) {
        var hostname = location.hostname;
        if (hostname.indexOf("wxscreen.sinaapp.com") == -1 && hostname.indexOf("wxscreen.com") == -1 && hostname.indexOf("alltosun.net") == -1) {
            window.location.reload();
            return
        }
        if (this._syncProgress == "started") {
            return cb("started")
        }
        this._syncProgress = "started";
        var lastId = this._tag_id ? this._tag_lastId: this._lastId;
        var postData, me = this;
        cb = cb || g.loop;
        postData = {
            tag_id: this._tag_id,
            limit: 200,
            msg_type: "text",
            order: "DESC"
        };
        this._pullAjaxObj = $.post(this._conf.msgUrl, postData,
            function(json) {
                var err = null,
                succ = false;
                // console.log(222);
                // console.log(json);

                if (json.info != "ok") {
                    err = json.info
                } else {
                    if (json.message_list) {
                        me.add(json.message_list)
                    }
                    succ = true
                }
                me._syncProgress = "stoped";
                cb(err, succ)
            },
        "json").error(function(jqXHR, textStatus, errorThrown) {
            me.log("danmu.sync ajax-error: jqXHR, textStatus, errorThrown ", jqXHR, textStatus, errorThrown);
            me._syncProgress = "stoped";
            cb("ajax-error:" + textStatus)
        });
        return this
    };
    danmu.add = function(list) {
        if (!this._msgPlayed) {
            this._msgPlayed = []
        }
        if (!list || !list.length) {
            return false
        }
        if (this._tag_id) {
            this._tag_lastId = list[list.length - 1].tag_relation_id
        } else {
            this._lastId = list[list.length - 1].update_time_ms
        }
    };
    // danmu.lastid=0;
    danmu.getOldMsg = function() {
        var _self=this;
        //以post 方式向服务器发送ajax 请求
        $.get(this._conf.msgUrl, {},
            function(json) {
             // console.log(json);
            if (json.ret == 1) {
                if (json.data) {
                    if (danmu._totalMsg < 1) {
                        danmu._msgPlayed = json.data;
                        _self.lastid=json.data[0].id;
                    }
                }
                if (json.data.length) {
                    danmu._totalMsg = json.data.length;
                }
                // if (json.message_total) {
                //     danmu._totalMsg = json.message_total
                // }
            }
        },
        //     function(json) {
        //      // console.log(json);
        //     if (json.info == "ok") {
        //         if (json.message_list) {
        //             if (danmu._totalMsg < 1) {
        //                 danmu._msgPlayed = json.message_list
        //             }
        //         }
        //         if (json.message_total) {
        //             danmu._totalMsg = json.message_total
        //         }
        //     }
        // },
        "json")
    };
    danmu.log = function() {
        if (!this.DEBUG) {
            return false
        }
        if (!arguments.length) {
            return false
        }
        if (window.console && console.log && console.log.apply) {
            // console.log("");
            // console.log.apply(console, Array.prototype.slice.call(arguments, 0, arguments.length));
            // console.log(" ")
        }
    };
    danmu.setConf = function(conf) {
        this._conf = conf
    };
    danmu.init = function(conf) {
        if (typeof conf != "undefined") {
            this._conf = conf
        } else {
            if (!this._conf) {
                this._conf = {}
            }
        }
        if (danmu._conf["danmuType"] == 3 || danmu._conf["danmuType"] == 2 || danmu._conf["danmuType"] == 4) {
            danmu._colorList = ["white"]
        } else {
            danmu._colorList = ["white", "orange2", "orange", "green", "yellow"]
        }
        this._WW = $(window).width();
        this._WH = $(window).height();
        this._Tvisible = parseFloat((this._WW / this._Vmax + this._WW / this._Vmin) / 2).toFixed(2) * 1;
        this._DH = $(".danmu-row").height();
        this._DTop = $(".danmu-row:eq(0)").position().top;
        if (danmu._conf["danmuType"] == 4) {
            if (!$(".footer:visible").length) {
                var leftH = this._WH
            } else {
                var leftH = $(".footer")[0].getBoundingClientRect().top + 10
            }
        } else {
            if (danmu._conf["danmuType"] == 3) {
                if (!$(".footer:visible").length) {
                    var leftH = this._WH
                } else {
                    var leftH = $(".footer")[0].getBoundingClientRect().top + 10
                }
            } else {
                if (danmu._conf["danmuType"] == 2) {
                    if (!$(".logo-box:visible").length) {
                        var leftH = this._WH
                    } else {
                        var leftH = $(".logo-box")[0].getBoundingClientRect().top
                    }
                } else {
                    if (!$(".footer:visible").length) {
                        var leftH = this._WH
                    } else {
                        var leftH = $(".footer")[0].getBoundingClientRect().top - 10
                    }
                }
            }
        }
        this.initDom(leftH);
        if (Modernizr.canvas && (this._conf.canvas || window.APP && window.APP.urlParams["canvas"] == 1)) {
            this.initCanvas(leftH)
        }
        if (this._conf.isLoop) {
            if (this._conf && this._conf.msgUrl) {
                this.getOldMsg()
            }
        }
        if (!this._inited && this._conf.isDefaultStyle) {
            var backgroundStyle = parent.$("#wrap").css("background");
            if (!backgroundStyle) {
                return
            }
            $("body").css("background", backgroundStyle)
        }
        this._inited = true
    };
    danmu.initDom = function(leftH) {
        var tmpRect;
        if (danmu._conf["danmuType"] == 4) {
            $.each($(".danmu-row"),
            function(k, v) {
                $(this).show();
                tmpRect = this.getBoundingClientRect();
                if (tmpRect.bottom > leftH) {
                    $(this).hide()
                }
            })
        } else {
            if (danmu._conf["danmuType"] == 3) {
                $.each($(".danmu-row"),
                function(k, v) {
                    $(this).show();
                    tmpRect = this.getBoundingClientRect();
                    if (tmpRect.bottom > leftH) {
                        $(this).hide()
                    }
                })
            } else {
                $.each($(".danmu-row"),
                function(k, v) {
                    $(this).show();
                    tmpRect = this.getBoundingClientRect();
                    if (tmpRect.bottom > leftH) {
                        $(this).hide()
                    }
                })
            }
        }
        this._lineNum = $(".danmu-row:visible").length
    };
    danmu.initCanvas = function(leftH) {
        $(".danmu-row").hide();
        var st = "width:" + this._WW + "px;height:" + leftH + "px;position:absolute;top:0;left:0;";
        $('<canvas id="danmuCanvas" style="' + st + '" width="' + this._WW + '" height="' + leftH + '"></canvas>').appendTo(".danmu-box");
        if (!this.stage) {
            this.stage = new createjs.Stage("danmuCanvas")
        }
        var top = this._DTop;
        for (var i = 0; i < this._lineNum; i++) {
            var rowName = "line" + i;
            var oldRow = this.stage.getChildByName(rowName);
            if (!oldRow) {
                var danmuRow = new createjs.Container();
                danmuRow.name = "line" + i;
                danmuRow.setBounds(0, top, this._WW, this._DH);
                danmuRow.y = top;
                this.stage.addChild(danmuRow)
            }
            top += this._DH
        }
        createjs.Ticker.setFPS(60);
        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.addEventListener("tick", this.stage)
    };
    danmu.bindEvent = function() {
        // $(window).on("resize",function(){danmu.init()});
        danmu.init();
        // if (!g.APP) {
        //     console.log("return");
        //     return
        // }
        // APP.on("show",
        // function() {

        //     //播放弹幕
        //     danmu.play()
        // });
        // APP.on("hide",
        // function() {
        //     danmu.stop()
        // });
        // APP.on("message.newMsgReceived",
        // function(evt, data) {
        //     if (!danmu._msgList) {
        //         danmu._msgList = [];
        //     }

        //     danmu._msgList = danmu._msgList.concat(data);
        //     danmu._msgPlayed = danmu._msgPlayed.concat(data);
        //     danmu._getNewMsg = true
        // })
        // function getdata(){
        //     $.ajax({
        //         'url':this._conf.msgUrl,
        //         'type':'get',
        //         'dataType':'json',
        //         'success':function(json){
        //             console.log(json);
        //         }
        //     })
        // }
        setInterval('danmu.getdata()',3000);
    };
    // var lastid=0;
    danmu.getdata=function(){
        $.ajax({
            'url':this._conf.msgUrl,
            'data':{'lastid':lastid},
            'type':'get',
            'dataType':'json',
            'success':function(json){
                // console.log(json);
                if (!danmu._msgList) {
                    danmu._msgList = [];
                }

                // $.each(json.data, function (i, v) {
                //     lastid =lastid<v['id']?v['id']:lastid;
                // });
                var index=json.data.length>0?json.data.length-1:0;
                var datalength=json.data.length;
                if(datalength>0){
                    lastid =lastid<json.data[datalength-1].id?json.data[datalength-1].id:lastid;
                }
              

                danmu._msgList = danmu._msgList.concat(json.data);
                danmu._msgPlayed = danmu._msgPlayed.concat(json.data);
                danmu._getNewMsg = true;
            }
        })
    };

    danmu.play = function() {
        // console.log('start');
        this.init();
        this.stop();
        this._playState = "played";
        this.playCheckOnce()
    };
    danmu.playCheckOnce = function() {
        var d, ret, tmpList = [];

        // console.log(this._lineNum+"!"+this._prePlayList.length);
        //this._lineNum 是屏幕上消息的行数
        //diffNum 有差别的消息的熟料  现在消息总数  之前消息的长度
        var diffNum = this._lineNum - this._prePlayList.length;
        if (diffNum > 0) {
            var msgs = this.getMessage(diffNum);
            // console.log(msgs);
            //如果是循环播放
            if (this._conf.isLoop) {
                if (!msgs.length) {
                    this._getNewMsg = false;
                    msgs = this.getOldMessage(diffNum)
                }
            }

            //播放的msg 进行处理
            if (msgs.length) {
                for (var i = 0; i < msgs.length; i++) {
                    // console.log(msgs[i]);
                    // 进入renderOne 这个函数处理
                    d = this.renderOne(msgs[i]);

                    if (d) {

                        //将这条信息加入到预播放的数组列表
                        this._prePlayList.push(d)
                    }
                }
            }
        }


        for (var i = 0; i < this._prePlayList.length; i++) {
            d = this._prePlayList[i];
            ret = this.setLine(d);
            if (true !== ret) {
                tmpList.push(d)
            } else {
                this.animateOne(d)
            }
        }
        this._prePlayList = tmpList;
        if (this._playState == "played") {
            this._playerTimer = setTimeout(function() {
                danmu.playCheckOnce()
            },
            this._playCheckTime)
        }
    };
    danmu.stop = function() {
        if (this._playerTimer) {
            clearTimeout(this._playerTimer);
            this._playerTimer = null
        }
        $(".danmu-one").remove();
        this._prePlayList = [];
        if (this.stage) {
            this.clearCanvas()
        }
        this.pullStop();
        this._playState = "stoped"
    };
    danmu.clearCanvas = function() {
        var ret = false;
        for (var i = 0; i < this._lineNum; i++) {
            var rowName = "line" + i;
            var oldRow = this.stage.getChildByName(rowName);
            if (oldRow) {
                oldRow.removeAllChildren();
                ret = true
            }
        }
        if (ret) {
            this.stage.update()
        }
    };
    danmu.getMessage = function(maxNum) {
        maxNum = maxNum || 1;
        return this._msgList.splice(0, maxNum)
    };
    danmu.getOldMessage = function(maxNum) {
        maxNum = maxNum || 1;
        if (this._msgPlayed.length > 500) {
            this._msgPlayed.splice(0, 200)
        }
        var randOne = danmu.rand(0, this._msgPlayed.length - 1);
        return this._msgPlayed.slice(randOne, randOne + 1)
    };
    danmu.setLine = function(d) {
        var Sn = this.data(d, "width");
        var Tn = this.getDuration(d);
        var Vn = (Sn + this._WW) / Tn;
        var lineLastD, ret = false;
        var Sn_1, Tn_1, Vn_1, Tn_1_past, tn, tn_1;
        var now = (new Date).getTime();
        var totalLineNum = this._lineNum;
        if (this._conf.isLoop) {
            if (this._msgList.length < 1) {
                if (this._msgPlayed.length < 3) {
                    totalLineNum = 1
                } else {
                    if (this._msgPlayed.length < 8) {
                        totalLineNum = 2
                    } else {
                        if (this._msgPlayed.length < 12) {
                            totalLineNum = 3
                        } else {
                            totalLineNum = totalLineNum
                        }
                    }
                }
            }
        }
        for (var i = 0; i < totalLineNum; i++) {
            lineLastD = this.getLastD(i);
            if (!lineLastD) {
                ret = this.appendD(d, i);
                break
            }
            Sn_1 = this.data(lineLastD, "width");
            Tn_1 = this.getDuration(lineLastD);
            Vn_1 = (Sn_1 + this._WW) / Tn_1;
            Tn_1_past = (now - this.data(lineLastD, "start_t")) / 1000;
            if (Tn_1_past * Vn_1 < Sn_1) {
                continue
            }
            tn = this._WW / Vn;
            tn_1 = (this._WW - Vn_1 * Tn_1_past + Sn_1) / Vn_1;
            if (this._conf.isLoop) {
                if (tn_1 < tn - 1) {
                    ret = this.appendD(d, i);
                    break
                }
            } else {
                if (tn_1 < tn - 0.6) {
                    ret = this.appendD(d, i);
                    break
                }
            }
        }
        return ret
    };
    danmu.getLastD = function(i) {
        var d;
        if (this.stage) {
            var name = "line" + i;
            var line = this.stage.getChildByName(name);
            if (line) {
                d = line.children[line.children.length - 1];
                if (!d) {
                    d = null
                }
            }
        } else {
            if (danmu._conf["danmuType"] == 1) {
                d = $("#js_dRow" + i + " .danmu-one:last")
            } else {
                d = $("#js_dRow" + i + " .danmu-item:last")
            }
            if (!d.length) {
                d = null
            }
        }
        return d
    };
    danmu.appendD = function(d, i) {
        var ret;
        if (this.stage) {
            var line = this.stage.getChildByName("line" + i);
            if (line) {
                line.addChild(d);
                ret = true
            }
        } else {
            if (danmu._conf["danmuType"] > 1) {
                d.css("visibility", "visible");
                d.show()
            }
            d.appendTo("#js_dRow" + i);
            ret = true
        }
        return ret
    };
    danmu.getDuration = function(d) {
        var dw = this.data(d, "width"),
        s = dw + this._WW,
        v,
        duration;
        v = s / this._Tvisible;
        if (v < this._Vmin) {
            duration = s / this._Vmin
        } else {
            if (v > this._Vmax) {
                duration = s / this._Vmax
            } else {
                duration = this._Tvisible
            }
        }
        return parseFloat(duration).toFixed(2) * 1
    };
    danmu.animateOne = function(d) {
        var now = (new Date).getTime();
        this.data(d, "start_t", now);
        if (this.stage) {
            return this.animateOneCanvas(d)
        }
        var dw = this.data(d, "width");
        if (Modernizr.csstransitions) {
            d.transition({
                x: -dw,
                duration: this.getDuration(d) * 1000,
                easing: "linear",
                complete: function() {
                    $(this).remove()
                }
            })
        } else {
            d.animate({
                left: -dw
            },
            this.getDuration(d) * 1000, "linear",
            function() {
                $(this).remove()
            })
        }
        return d
    };
    danmu.animateOneCanvas = function(d) {
        var duration = this.getDuration(d) * 1000;
        var dw = this.data(d, "width");
        createjs.Tween.get(d).to({
            x: -dw
        },
        duration, createjs.Ease.linear).call(function() {
            try {
                this.parent.removeChild(this)
            } catch(e) {}
        })
    };
    danmu.renderOneCanvas = function(msg) {
        var d;
        if (msg.msg_type == "image") {
            return d
        }
        var colorHash = this._colorHashList[this._colorList[this.rand(0, this._colorList.length - 1)]];
        var fontStyle = "40px 'Microsoft yahei', SimHei";
        d = new createjs.Text(msg.username + "：" + msg.content, fontStyle, colorHash);
        this.data(d, "width", d.getBounds().width + this._Dmargin);
        d.x = this._WW;
        return d
    };
    danmu.renderOne = function(msg) {
        var d;
        if (this.stage) {
            return this.renderOneCanvas(msg)
        }
        // console.log('渲染一条信息');
        // console.log(msg);

        //如果消息类型不是图片 进入这里处理
        if (msg.msg_type != "image") {
            msg.content = msg.content.replace(/(\n|(<br\/>)|(<br>)|(<br\s\/>))/g, " ");
            var color = this._colorList[this.rand(0, this._colorList.length - 1)];
            if (danmu._conf["danmuType"] == 4) {
                var msgDom = '<div class="danmu-item" data-id="' + msg.id + '" style="position:absolute; visibility:hidden;">    		      <div class="box">    		        <div class="box1"><img src="' + msg.avatar + '"></div>    		        <div class="box2"><img src="' + msg.avatar + '"></div>    		        <div class="box3"><img src="' + msg.avatar + '"></div>    		      </div>    		      <span class="ava-bg"></span>';
                if (0 == danmu._conf["openAnonymous"]) {
                    msgDom += '<span class="name ' + color + '" style="white-space: nowrap;">' + msg.nickname + "：</span>"
                }
                msgDom += '<span class="js_redContent ' + color + '" style="white-space: nowrap;">' + msg.content + "</span></div>";
                d = $(msgDom).appendTo("body");
                var newWidth = d.find(".ava-bg").width() + d.find(".js_redContent").width();
                if (0 == danmu._conf["openAnonymous"]) {
                    newWidth += d.find(".name").width()
                }
                danmu.data(d, "width", newWidth + 30 + danmu._Dmargin)
            } else {
                //如果消息类型是图片 进入这里处理
                if (danmu._conf["danmuType"] == 3) {
                    var msgDom = ' <div class="danmu-item" data-id="' + msg.id + '" style="position:absolute; visibility:hidden;">    		      <div class="box">    		        <div class="box1"><img src="' + msg.avatar + '"></div>    		        <div class="box2"><img src="' + msg.avatar + '"></div>    		        <div class="box3"><img src="' + msg.avatar + '"></div>    		      </div>    		      <span class="ava-bg"></span>    		      <span class="ava-title"></span>';
                    if (0 == danmu._conf["openAnonymous"]) {
                        msgDom += '<span class="name ' + color + '" style="white-space: nowrap;">' + msg.nickname + "：</span>"
                    }
                    msgDom += '<span class="' + color + ' js_redContent"  style="white-space: nowrap;">' + msg.content + "</span></div>";
                    d = $(msgDom).appendTo("body");
                    var newWidth = d.find(".ava-bg").width() + 30 + d.find(".js_redContent").width();
                    if (0 == danmu._conf["openAnonymous"]) {
                        newWidth += d.find(".name").width()
                    }
                    danmu.data(d, "width", newWidth + 50 + danmu._Dmargin)
                } else {
                    if (danmu._conf["danmuType"] == 2) {
                        var msgDom = '<div data-id="' + msg.id + '" class="danmu-item clearfix" style="position:absolute; visibility:hidden;">	        <div class="box">	          <img src="' + msg.avatar + '">	        </div>	        <div class="con">';
                        if (0 == danmu._conf["openAnonymous"]) {
                            msgDom += '<span class="name ' + color + '">' + msg.nickname + "：</span>"
                        }
                        msgDom += '<span class="txt ' + color + '">' + msg.content + "</span></div></div>";
                        d = $(msgDom).appendTo("body");
                        var newWidth = d.find(".box").width() + d.find(".txt").width();
                        if (0 == danmu._conf["openAnonymous"]) {
                            newWidth += d.find(".name").width()
                        }
                        danmu.data(d, "width", newWidth + 100 + danmu._Dmargin)
                    } else {
                        var msgDom = '<div data-id="' + msg.id + '" class="danmu-one">';
                        if (0 == danmu._conf["openAnonymous"]) {
                            msgDom += '<span class="' + color + '">' + msg.username + "：</span>"
                        }
                        msgDom += '<span class="' + color + '">' + msg.content + "</span></div>";
                        d = $(msgDom).appendTo("body");
                        this.data(d, "width", d.width() + this._Dmargin)
                    }
                }
            }
            if (Modernizr.csstransitions) {
                d.css("x", this._WW)
            } else {
                d.css("left", this._WW)
            }
        }

        // console.log(d);
        return d
    };
    danmu.rand = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min
    };
    danmu.benchmark = function() {
        this.benchmarkStop();
        this._benchTimer = setInterval(function() {
            for (var i = 0; i < 50; i++) {
                danmu._benchNum++;
                if (danmu._benchNum % 3 == 0) {
                    var randLen = danmu.rand(1, 45)
                } else {
                    if (danmu._benchNum % 3 == 1) {
                        var randLen = danmu.rand(1, 100)
                    } else {
                        var randLen = danmu.rand(1, 450)
                    }
                }
                danmu._msgList.push({
                    id: "bench",
                    username: "bench+",
                    content: danmu.randomStr(randLen)
                })
            }
        },
        5000)
    };
    danmu.randomStr = function(length) {
        if (isNaN(length)) {
            return ""
        }
        var str = "";
        for (var i = 0; i < length; i++) {
            var rand = this.rand(0, _strMap.length - 1);
            str += _strMap.charAt(rand)
        }
        return str
    };
    danmu.benchmarkStop = function() {
        if (this._benchTimer) {
            clearInterval(this._benchTimer);
            this._benchTimer = null
        }
        this._benchNum = 0
    };
    danmu.data = function(d, prop, val) {
        if ("undefined" == typeof val) {
            if ("undefined" != typeof d["_" + prop]) {
                return d["_" + prop]
            }
            if ("function" == typeof d.data) {
                return d.data(prop)
            }
            return
        }
        if ("function" == typeof d.data) {
            d.data(prop, val)
        } else {
            d["_" + prop] = val
        }
    };
    danmu.loop = function() {}
})(window);

//绑定弹幕事件
danmu.bindEvent();